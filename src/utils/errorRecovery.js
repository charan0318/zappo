const { logger } = require('./logger');
const errorHandler = require('./errorHandler');

class ErrorRecovery {
  constructor() {
    this.recoveryActions = new Map();
    this.initializeRecoveryActions();
  }

  initializeRecoveryActions() {
    // Wallet recovery actions
    this.recoveryActions.set('WALLET_001', {
      action: 'suggest_wallet_creation',
      message: 'üÜï Would you like me to help you create a new wallet? Reply "create wallet" to get started.'
    });

    // Transaction recovery actions
    this.recoveryActions.set('TX_001', {
      action: 'suggest_retry',
      message: 'üîÑ Would you like to try the transaction again? Reply "retry" or wait a few minutes for better network conditions.'
    });

    this.recoveryActions.set('TX_002', {
      action: 'check_status',
      message: 'üîç I can check your transaction status. Reply "status" to see recent transactions.'
    });

    // Network recovery actions
    this.recoveryActions.set('NET_001', {
      action: 'network_help',
      message: 'üì∂ Network issues detected. Try:\n‚Ä¢ Check your internet connection\n‚Ä¢ Switch networks if possible\n‚Ä¢ Wait a few minutes and try again'
    });

    // Balance recovery actions
    this.recoveryActions.set('WALLET_003', {
      action: 'balance_help',
      message: 'üí∞ Need more AVAX? You can:\n‚Ä¢ Receive from another wallet\n‚Ä¢ Buy AVAX on an exchange\n‚Ä¢ Check your recent transactions with "history"'
    });
  }

  /**
   * Get recovery suggestion for an error
   */
  getRecoveryAction(errorCode) {
    return this.recoveryActions.get(errorCode);
  }

  /**
   * Handle user recovery action
   */
  async handleRecoveryAction(action, userPhone, messageHandler) {
    try {
      switch (action) {
        case 'suggest_wallet_creation':
          await messageHandler(userPhone, 
            'üîê Creating a wallet is easy and secure!\n\n' +
            'Just reply "create wallet" and I\'ll guide you through the process.\n\n' +
            'Your wallet will be:\n' +
            '‚úÖ Encrypted and secure\n' +
            '‚úÖ Linked to your phone number\n' +
            '‚úÖ Ready to use immediately'
          );
          break;

        case 'suggest_retry':
          await messageHandler(userPhone,
            'üîÑ Ready to try again?\n\n' +
            'You can:\n' +
            '‚Ä¢ Retry your last transaction\n' +
            '‚Ä¢ Check your balance first\n' +
            '‚Ä¢ Try a smaller amount\n\n' +
            'What would you like to do?'
          );
          break;

        case 'check_status':
          await messageHandler(userPhone,
            'üîç I can help you check:\n\n' +
            '‚Ä¢ Recent transaction history\n' +
            '‚Ä¢ Current balance\n' +
            '‚Ä¢ Transaction status\n\n' +
            'Reply "history", "balance", or describe what you\'re looking for.'
          );
          break;

        case 'network_help':
          await messageHandler(userPhone,
            'üåê Network Troubleshooting:\n\n' +
            '1Ô∏è‚É£ Check your internet connection\n' +
            '2Ô∏è‚É£ Try switching between WiFi/Mobile data\n' +
            '3Ô∏è‚É£ Wait 1-2 minutes for network recovery\n' +
            '4Ô∏è‚É£ Try your request again\n\n' +
            'If issues persist, our team is investigating.'
          );
          break;

        case 'balance_help':
          await messageHandler(userPhone,
            'üí∞ Need AVAX? Here are your options:\n\n' +
            'üì• **Receive AVAX:**\n' +
            '‚Ä¢ Share your wallet address\n' +
            '‚Ä¢ Request payment from friends\n\n' +
            'üè™ **Buy AVAX:**\n' +
            '‚Ä¢ Use exchanges like Binance, Coinbase\n' +
            '‚Ä¢ Buy on DEXs like TraderJoe\n\n' +
            'Reply "address" to get your wallet address!'
          );
          break;

        default:
          logger.warn('Unknown recovery action:', action);
      }
    } catch (error) {
      logger.error('Error in recovery action:', {
        action,
        userPhone,
        error: error.message
      });
    }
  }

  /**
   * Create enhanced error message with recovery options
   */
  createEnhancedErrorMessage(errorInfo) {
    let message = errorHandler.formatErrorMessage(errorInfo);
    
    const recovery = this.getRecoveryAction(errorInfo.code);
    if (recovery) {
      message += '\n\n' + recovery.message;
    }
    
    return message;
  }
}

module.exports = new ErrorRecovery();
